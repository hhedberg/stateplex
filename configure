#! /bin/bash

#
# Stateplex - A server-side actor model library.
#
# configure - a script to generate Makefile
#
# (c) 2013 Henrik Hedberg <henrik.hedberg@innologies.fi>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# Authors: Henrik Hedberg
#

target=build/debug
cppflags=-I.
cxx=g++
cxxflags=-g
ld=g++
ldflags=
output=Makefile
doxygen=0
gtest_installed=0

function check_for_doxygen() {
        for d in `echo $PATH | sed "s/:/ /g"`; do
                if [ -r $d/doxygen ]; then
                        let doxygen=1
                        break
                fi
        done
}

function check_for_gtest() {
        tmp=$(ls /usr/include/ | grep gtest)
        if [ "$tmp" !=  gtest ]; then
                tmp=$(ls /usr/local/include | grep gtest)
        fi

        if [ "$tmp" == gtest ]; then
                let gtest_installed=0
        fi
}

function write_line() {
	text=$1
	
	echo -e "$text"
}

function write_rule() {
	rule=$1
	prerequisites=$2
	message=$3
	shift 3
	
	write_line "$rule: $prerequisites"
	if [ "$message" != "" ]; then
		write_line "\t@echo $message..."
	fi
	while [ "$1" != "" ]; do
		write_line "\t@$1"
		shift 1
	done
}

function write_header() {
	path=$1
	name=$2
	title=$3
	
	write_line ""
	write_line "### $title ###"
	write_line ""

	if [ -r $path/build.conf ]; then
		cat $path/build.conf | while read -r line ; do echo ${name}_$line; done
		write_line ""
	fi

	write_rule "\$(TARGET)/$path/.deps" \
	           "" \
		   "" \
	           "mkdir -p \$(TARGET)/$path/.deps"
}

function write_unit() {
	name=$1
	path=$2
	object=$3

	write_line ""
	write_line "# $path/$object"
	write_line "${name}_OBJECTS += \$(TARGET)/$path/$object"
	write_line "${name}_DEPS += \$(TARGET)/$path/.deps/${object}.dep"
	write_line "-include \$(TARGET)/$path/.deps/${object}.dep"
}

function configure_sources() {
	path=$1
	name=$2

	for source in $path/*.cpp; do
		object=$(basename $source .cpp).o

		write_unit "$name" "$path" "$object"
		write_rule "\$(TARGET)/$path/$object" \
		           "$source \$(TARGET)/$path/.deps" \
		           "Compiling $source" \
		           "\$(CXX) -c -fPIC \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) -o \$(TARGET)/$path/$object $source"
		write_rule "\$(TARGET)/$path/.deps/${object}.dep" \
		           "$source \$(TARGET)/$path/.deps" \
		           "Calculating dependencies for $source" \
		           "\$(CXX) -MM -MT \$(TARGET)/$path/$object -MF \$(TARGET)/$path/.deps/${object}.dep \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) $source"
	done
}

function configure_library() {
	path=$1

	name=$(echo $path | tr / _)
	library_name=$(echo $path | tr / -)
	directory=$(dirname $path)

	write_header "$path" "$name" "Library: $library_name"

	configure_sources "$path" "$name"

	write_line ""
	write_line "ALL += \$(TARGET)/$directory/lib$library_name.so \$(TARGET)/$directory/lib$library_name.a"
	write_rule "\$(TARGET)/$directory/lib$library_name.so" \
	           "\$(${name}_OBJECTS) \$(${name}_DEPS)" \
	           "Assembling $directory/lib$library_name.so" \
	           "\$(LD) -shared \$(LDFLAGS) \$(${name}_LDFLAGS) -o \$(TARGET)/$directory/lib$library_name.so \$(${name}_OBJECTS)"
	write_rule "\$(TARGET)/$directory/lib$library_name.a" \
	           "\$(${name}_OBJECTS) \$(${name}_DEPS)" \
	           "Assembling $directory/lib$library_name.a" \
		   "rm -f \$(TARGET)/$directory/lib$library_name.a" \
		   "ar -cq \$(TARGET)/$directory/lib$library_name.a \$(${name}_OBJECTS)" \
		   "ranlib \$(TARGET)/$directory/lib$library_name.a"
}

function configure_executable() {
	path=$1

	name=$(echo $path | tr / _)
	executable_name=$(echo $path | tr / -)
	directory=$(dirname $path)

	write_header "$path" "$name" "Executable: $executable_name"

	configure_sources "$path" "$name"

	write_line ""
	write_line "ALL += \$(TARGET)/$directory/$executable_name"
	write_rule "\$(TARGET)/$directory/$executable_name" \
	           "\$(${name}_OBJECTS) \$(${name}_DEPS)" \
	           "Linking $directory/$executable_name..." \
	           "\$(LD) -o \$(TARGET)/$directory/$executable_name \$(${name}_OBJECTS) \$(LDFLAGS) \$(${name}_LDFLAGS)"
}
check_for_gtest
check_for_doxygen
exec > $output

echo -e "TARGET=$target"
echo -e "CPPFLAGS=$cppflags"
echo -e "CXX=$cxx"
echo -e "CXXFLAGS=$cxxflags"
echo -e "LD=$ld"
echo -e "LDFLAGS=$ldflags"
echo ""

echo -e "all: default"
echo ""

echo -e "clean:"
echo -e "\trm -Rf build"

echo -e "distclean: clean"
echo -e "\trm -f Makefile"
echo -e "\trm -Rf doc/html doc/latex" 

if [ $gtest_installed == 0 ]; then
        echo -e "test:"
        echo -e "\t@echo -n \"Google test framework is not installed to your system, you can get it from http://code.google.com/p/googletest/\""
        echo ""
fi

if [ $doxygen == 1 ]; then
        echo -e "docs:"
        echo -e "\t@echo -n \"Creating Doxygen documentation...\""
        echo -e "\t@doxygen $(pwd)/doc/settings"
        echo -e "\t@echo \"done\""
        echo ""
else
        echo -e "docs:"
        echo -e "\t@echo \"Doxygen is not installed to your system, you can get it from http://www.stack.nl/~dimitri/doxygen/download.html\""
        echo ""
fi

for library in $(find stateplex -mindepth 1 -type d); do
	echo "Configuring library $library..." >&2
	configure_library $library
done

for executable in $(find examples -mindepth 1 -type d); do
	echo "Configuring executable $executable..." >&2
	configure_executable $executable
done

<<<<<<< HEAD
=======
echo -e ""
echo -e "default: \$(ALL)"
>>>>>>> master
