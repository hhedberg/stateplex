#! /bin/bash

#
# Stateplex - A server-side actor model library.
#
# configure - a script to generate Makefile
#
# (c) 2013 Henrik Hedberg <henrik.hedberg@innologies.fi>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# Authors: Henrik Hedberg
#

target=build/debug
cppflags=-I.
cxxflags=-g
ldflags=
output=Makefile
doxygen=0

function check_for_doxygen() {
        for d in `echo $PATH | sed "s/:/ /g"`; do
                if [ -r $d/doxygen ]; then
                        let doxygen=1
                        break
                fi
        done
}

function configure_library() {
	path=$1
	name=$(echo $path | tr / _)
	library_name=$(echo $path | tr / -)
	directory=$(dirname $path)

	echo ""
	echo -e "### Library: $library_name ###"
	echo ""
	echo -e "\$(TARGET)/$path/.deps:"
	echo -e "\tmkdir -p \$(TARGET)/$path/.deps"

	for source in $path/*.cpp; do
		object=$(basename $source .cpp).o

		echo ""
		echo -e "# $path/$object"
		echo -e "${name}_OBJECTS += \$(TARGET)/$path/$object"
		echo -e "${name}_DEPS += \$(TARGET)/$path/.deps/${object}.dep"

		echo -e "\$(TARGET)/$path/$object: $source \$(TARGET)/$path/.deps"
		echo -e "\tg++ -c -fPIC \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) -o \$(TARGET)/$path/$object $source"

		echo -e "\$(TARGET)/$path/.deps/${object}.dep: $source \$(TARGET)/$path/.deps"
		echo -e "\tg++ -MM -MT \$(TARGET)/$path/$object -MF \$(TARGET)/$path/.deps/${object}.dep \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) $source"
		echo -e "-include \$(TARGET)/$path/.deps/${object}.dep"
	done

	echo ""
	echo -e "\$(TARGET)/$directory/lib$library_name.so: \$(${name}_OBJECTS) \$(${name}_DEPS)"
	echo -e "\tg++ -shared \$(LDFLAGS) \$(${name}_LDFLAGS) -o \$(TARGET)/$directory/lib$library_name.so \$(${name}_OBJECTS)"
	echo -e "\$(TARGET)/$directory/lib$library_name.a: \$(${name}_OBJECTS) \$(${name}_DEPS)"
	echo -e "\trm -f \$(TARGET)/$directory/lib$library_name.a"
	echo -e "\tar -cq \$(TARGET)/$directory/lib$library_name.a \$(${name}_OBJECTS)"
	echo -e "\tranlib \$(TARGET)/$directory/lib$library_name.a"
}

function configure_executable() {
	path=$1
	name=$(echo $path | tr / _)
	executable_name=$(echo $path | tr / -)
	directory=$(dirname $path)

	echo ""
	echo -e "### Executable: $executable_name ###"
	echo ""
	echo -e "\$(TARGET)/$path/.deps:"
	echo -e "\tmkdir -p \$(TARGET)/$path/.deps"

	if [ -r $path/build.conf ]; then
		cat $path/build.conf | while read -r line ; do echo ${name}_$line; done
	fi

	for source in $path/*.cpp; do
		object=$(basename $source .cpp).o

		echo ""
		echo -e "# $path/$object"
		echo -e "${name}_OBJECTS += \$(TARGET)/$path/$object"
		echo -e "${name}_DEPS += \$(TARGET)/$path/.deps/${object}.dep"

		echo -e "\$(TARGET)/$path/$object: $source \$(TARGET)/$path/.deps"
		echo -e "\tg++ -c -fPIC \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) -o \$(TARGET)/$path/$object $source"

		echo -e "\$(TARGET)/$path/.deps/${object}.dep: $source \$(TARGET)/$path/.deps"
		echo -e "\tg++ -MM -MT \$(TARGET)/$path/$object -MF \$(TARGET)/$path/.deps/${object}.dep \$(CPPFLAGS) \$(${name}_CPPFLAGS) \$(CXXFLAGS) \$(${name}_CXXFLAGS) $source"
		echo -e "-include \$(TARGET)/$path/.deps/${object}.dep"
	done

	echo ""
	echo -e "\$(TARGET)/$directory/$executable_name: \$(${name}_OBJECTS) \$(${name}_DEPS)"
	echo -e "\tg++ -o \$(TARGET)/$directory/$executable_name \$(${name}_OBJECTS) \$(LDFLAGS) \$(${name}_LDFLAGS)"
}

check_for_doxygen
exec > $output

echo -e "TARGET=$target"
echo -e "CPPFLAGS=$cppflags"
echo -e "CXXFLAGS=$cxxflags"
echo -e "LDFLAGS=$ldflags"
echo ""

if [ $doxygen == 1 ]; then
        echo -e "docs:"
        echo -e "\t @echo -n \"Creating Doxygen documentation...\""
        echo -e "\t@doxygen $(pwd)/doc/settings"
        echo -e "\t @echo \"done\""
        echo ""
else
        echo -e "docs:"
        echo -e "\t @echo \"Doxygen is not installed to your system, you can get it from http://www.stack.nl/~dimitri/doxygen/download.html\""
        echo ""
fi

echo -e "all: \$(TARGET)/stateplex/libstateplex-core.so \$(TARGET)/stateplex/libstateplex-core.a \$(TARGET)/examples/examples-hello"
echo ""

echo -e "clean:"
echo -e "\trm -Rf build"

echo -e "distclean: clean"
echo -e "\trm -f Makefile"
echo -e "\trm -Rf doc/html doc/latex" 

for library in $(find stateplex -mindepth 1 -type d); do
	echo Configuring library: $library >&2
	configure_library $library
done

for executable in $(find examples -mindepth 1 -type d); do
	echo Configuring executable: $executable >&2
	configure_executable $executable
done

